name: Build and test Modular Monolith

on:
  push:
    branches:
      - trunk

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Backend:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:20.10.24-dind
        options: --privileged
        ports:
          - 2375:2375
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Delete ModularMonolith NuGet.Config
        run: rm -f ModularMonolith/NuGet.Config

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Ensure Docker is running
        run: |
          docker version
          docker info
        
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
          source-url: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        env:
          NUGET_AUTH_TOKEN: ${{ github.token }}

      - name: Restore dependencies
        run: dotnet restore ModularMonolith/TicketBuddy.sln --no-cache --force-evaluate

      - name: Build solution
        run: dotnet build ModularMonolith/TicketBuddy.sln --configuration Release --no-restore

      - name: Run tests
        env:
          DOCKER_HOST: tcp://localhost:2375
        run: dotnet test ModularMonolith/TicketBuddy.sln --configuration Release --no-build --no-restore
  
  Frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'
          cache: 'npm'
          cache-dependency-path: UI/package-lock.json

      - name: Install dependencies
        working-directory: UI
        run: npm install

      - name: Lint
        working-directory: UI
        run: npm run lint

      - name: Build
        working-directory: UI
        run: npm run build

      - name: Test
        working-directory: UI
        run: npm run test

  EndToEnd:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:20.10.24-dind
        options: --privileged
        ports:
          - 2375:2375
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Delete ModularMonolith NuGet.Config
        run: rm -f ModularMonolith/NuGet.Config

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Ensure Docker is running
        run: |
          docker version
          docker info

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
          source-url: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        env:
          NUGET_AUTH_TOKEN: ${{ github.token }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'
          cache: 'npm'
          cache-dependency-path: E2E/package-lock.json

      - name: Restore .NET dependencies
        run: dotnet restore ModularMonolith/TicketBuddy.sln --no-cache --force-evaluate

      - name: Build .NET solution
        run: dotnet build ModularMonolith/TicketBuddy.sln --configuration Release --no-restore

      - name: Install Node.js dependencies for UI
        working-directory: UI
        run: npm install

      - name: Install Node.js dependencies for E2E
        working-directory: E2E
        run: npm install
        
      - name: Install Playwright Browsers
        run: |
            npx playwright install chromium
            sudo apt-get update
            sudo apt-get install -y libnss3 libatk-bridge2.0-0 libdrm2 libxcomposite1 libxdamage1 libxrandr2 libgbm1
        
      - name: Start up API and wait for health check
        working-directory: E2E
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run start:api:docker & npx wait-on https://localhost:5001/health
        
      - name: Run end-to-end tests
        working-directory: E2E
        run: npm run test:e2e